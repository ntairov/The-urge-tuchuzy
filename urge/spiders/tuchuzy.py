from scrapy.exceptions import IgnoreRequest
from scrapy.http.response.html import HtmlResponse
from scrapy.linkextractors import LinkExtractor
from scrapy.spiders import CrawlSpider, Rule

from ..items import UrgeItem, ProductLoader


class TuchuzySpider(CrawlSpider):
    name = 'tuchuzy'
    allowed_domains = ['tuchuzy.com']
    start_urls = ['https://www.tuchuzy.com']
    rules = (
        # Extract links matching 'collections/' and parse them with the spider's method parse_category.
        Rule(LinkExtractor(allow='collections/.*'), callback='parse_category'),
    )

    def parse_category(self, response: HtmlResponse) -> HtmlResponse:
        """
            List category and traverse product pages.
        """
        products_query = response.css("section#bc-sf-filter-products > div.product-grid-item")
        if not products_query:
            raise IgnoreRequest('Product items not found')
        self.logger.info(f'parse product_categories len: {len(products_query)}')

        for pdp in products_query.css('div.product-grid-item'):
            item_loader = ProductLoader(item=UrgeItem(), selector=pdp)
            item_loader.add_css('product_name', 'div.product-text > p.title::text')
            item_loader.add_css('product_brand', 'div.product-text > h2.vendor.h5::text')
            # get regular product price through OR (,).
            item_loader.add_css('product_price', 'div.product-text p.price s::text , span[itemprop="price"]::text')
            item_loader.add_css('product_sale_price', 'div.product-text p.sale span[itemprop="price"]::text')
            if 'href' in pdp.css('a').attrib:
                product_url = pdp.css('a').attrib['href']
                yield response.follow(product_url, callback=self.product_page, meta={'item': item_loader.load_item()})

    @staticmethod
    def product_page(response: HtmlResponse) -> dict:
        """
            Crawl meta information of products from the product page.
        """
        item_loader = ProductLoader(response=response, item=response.meta['item'])
        # Taxonomy is generated by combining Brand + Product Name.
        # Home / Araminta James / Terry Boyfriend Tee Shorts Set Apple
        item_loader.add_css('product_category', "div.product-details nav.breadcrumbs ::text")
        item_loader.add_css('product_img_links', 'div.product-images img::attr(src)')
        item = item_loader.load_item()
        yield item
